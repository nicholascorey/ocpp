"""
This type stub file was generated by pyright.
"""

from logging import Logger
from typing import Dict, List, Union, overload

from websockets.asyncio.server import ServerConnection

from ocpp.v16 import call, call_result

LOGGER = ...

def camel_to_snake_case(data):  # -> dict[Any, Any] | list[Any]:
    """
    Convert all keys of all dictionaries inside the given argument from
    camelCase to snake_case.

    Inspired by: https://stackoverflow.com/a/1176023/1073222

    """
    ...

def snake_to_camel_case(data):  # -> dict[Any, Any] | list[Any]:
    """
    Convert all keys of all dictionaries inside given argument from
    snake_case to camelCase.

    Inspired by: https://stackoverflow.com/a/19053800/1073222
    """
    ...

def serialize_as_dict(dataclass):  # -> dict[str, Any]:
    """Serialize the given `dataclass` as a `dict` recursively.

    @dataclass
    class StatusInfoType:
        reason_code: str
        additional_info: Optional[str] = None

    with_additional_info = StatusInfoType(
        reason="Unknown",
        additional_info="More details"
    )

    assert serialize_as_dict(with_additional_info) == {
        'reason': 'Unknown',
        'additional_info': 'More details',
    }

    without_additional_info = StatusInfoType(reason="Unknown")

    assert serialize_as_dict(with_additional_info) == {
        'reason': 'Unknown',
        'additional_info': None,
    }

    """
    ...

def remove_nones(data: Union[List, Dict]) -> Union[List, Dict]: ...

class ChargePoint:
    """
    Base Element containing all the necessary OCPP1.6J messages for messages
    initiated and received by the Central System
    """

    def __init__(
        self,
        id: str,
        connection: ServerConnection,
        response_timeout: int = ...,
        logger: Logger = ...,
    ) -> None:
        """

        Args:

            charger_id (str): ID of the charger.
            connection: Connection to CP.
            response_timeout (int): When no response on a request is received
                within this interval, a asyncio.TimeoutError is raised.
            logger: Optional Logger instance used for logging.
                By default, the 'ocpp' logger is used.

        """
        ...

    async def start(self) -> None: ...
    async def route_message(self, raw_msg: bytes) -> None:
        """
        Route a message received from a CP.

        If the message is a of type Call the corresponding hooks are executed.
        If the message is of type CallResult or CallError the message is passed
        to the call() function via the response_queue.
        """
        ...

    @overload
    async def call(
        self,
        payload: call.CancelReservation,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.CancelReservation: ...
    @overload
    async def call(
        self,
        payload: call.CertificateSigned,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.CertificateSigned: ...
    @overload
    async def call(
        self,
        payload: call.ChangeAvailability,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.ChangeAvailability: ...
    @overload
    async def call(
        self,
        payload: call.ChangeConfiguration,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.ChangeConfiguration: ...
    @overload
    async def call(
        self,
        payload: call.ClearCache,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.ClearCache: ...
    @overload
    async def call(
        self,
        payload: call.ClearChargingProfile,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.ClearChargingProfile: ...
    @overload
    async def call(
        self,
        payload: call.DeleteCertificate,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.DeleteCertificate: ...
    @overload
    async def call(
        self,
        payload: call.ExtendedTriggerMessage,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.ExtendedTriggerMessage: ...
    @overload
    async def call(
        self,
        payload: call.GetCompositeSchedule,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.GetCompositeSchedule: ...
    @overload
    async def call(
        self,
        payload: call.GetConfiguration,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.GetConfiguration: ...
    @overload
    async def call(
        self,
        payload: call.GetDiagnostics,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.GetDiagnostics: ...
    @overload
    async def call(
        self,
        payload: call.GetInstalledCertificateIds,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.GetInstalledCertificateIds: ...
    @overload
    async def call(
        self,
        payload: call.GetLocalListVersion,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.GetLocalListVersion: ...
    @overload
    async def call(
        self,
        payload: call.GetLog,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.GetLog: ...
    @overload
    async def call(
        self,
        payload: call.InstallCertificate,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.InstallCertificate: ...
    @overload
    async def call(
        self,
        payload: call.RemoteStartTransaction,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.RemoteStartTransaction: ...
    @overload
    async def call(
        self,
        payload: call.RemoteStopTransaction,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.RemoteStopTransaction: ...
    @overload
    async def call(
        self,
        payload: call.ReserveNow,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.ReserveNow: ...
    @overload
    async def call(
        self,
        payload: call.Reset,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.Reset: ...
    @overload
    async def call(
        self,
        payload: call.SendLocalList,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.SendLocalList: ...
    @overload
    async def call(
        self,
        payload: call.SetChargingProfile,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.SetChargingProfile: ...
    @overload
    async def call(
        self,
        payload: call.SignedUpdateFirmware,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.SignedUpdateFirmware: ...
    @overload
    async def call(
        self,
        payload: call.TriggerMessage,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.TriggerMessage: ...
    @overload
    async def call(
        self,
        payload: call.UnlockConnector,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.UnlockConnector: ...
    @overload
    async def call(
        self,
        payload: call.UpdateFirmware,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.UpdateFirmware: ...
    @overload
    async def call(
        self,
        payload: call.SignedFirmwareStatusNotification,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.SignedFirmwareStatusNotification: ...
    @overload
    async def call(
        self,
        payload: call.DataTransfer,
        suppress: bool = ...,
        unique_id: str = ...,
        skip_schema_validation: bool = ...,
    ) -> call_result.DataTransfer: ...
